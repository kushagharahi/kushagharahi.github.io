name: Lighthouse CI

permissions:
  pull-requests: write

on:
  push:
    branches: [dev]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [dev]

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm ci

      - name: Build website
        run: npm run prd-build

      - name: Run Lighthouse
        run: npm install -g @lhci/cli@0.11.x && lhci autorun --upload.target=temporary-public-storage --config=.github/workflows/.lighthouserc.js
      
      - name: Comment Lighthouse Scores
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            const prNumber = context.payload.pull_request.number;
            const reportFiles = fs.readdirSync('./.lighthouseci', { withFileTypes: true })
              .filter(dirent => dirent.isFile() && dirent.name.startsWith('lhr') && !dirent.name.endsWith('.html'))
              .map(dirent => dirent.name);

            let comment = '## Lighthouse Scores\n\n';
            for (const reportFile of reportFiles) {
              const pagePath = reportFile.replace('lhr-', '').replace('.json', '');
              const reportContent = fs.readFileSync('./lighthouseci/'+reportFile, 'utf8');
              const report = JSON.parse(reportContent);
              const scores = report.categories.reduce((acc, category) => {
                acc[category.title] = category.score * 100;
                return acc;
              }, {});
              const scoreTable = Object.entries(scores).map(([category, score]) => `- ${category}: ${score}`).join('\n');
              comment += `- ${pagePath}\n\`\`\`\n${scoreTable}\n\`\`\`\n`;
            }

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            const existingComment = comments.data.find(comment => comment.body.includes('## Lighthouse Scores'));

            console.log(existingComment)
            if (existingComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }