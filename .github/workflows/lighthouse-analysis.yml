name: Lighthouse CI

on:
  push:
    branches: [dev]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [dev]

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm ci

      - name: Build website
        run: npm run prd-build

      - name: Run Lighthouse
        run: npm install -g @lhci/cli@0.11.x && lhci autorun --upload.target=temporary-public-storage --config=.github/workflows/.lighthouserc.js
      
      - name: Comment Lighthouse Scores
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            const prNumber = context.payload.pull_request.number;
            const reportFiles = fs.readdirSync('./', { withFileTypes: true })
              .filter(dirent => dirent.isFile() && dirent.name.startsWith('lighthouse-report-'))
              .map(dirent => dirent.name);

            let comment = '## Lighthouse Scores\n\n';
            for (const reportFile of reportFiles) {
              const pagePath = reportFile.replace('lighthouse-report-', '').replace('.json', '');
              const score = execSync(`npx lighthouse-score ${reportFile} --json`).toString();
              comment += `- ${pagePath}\n\`\`\`\n${score}\n\`\`\`\n`;
            }

            const octokit = context.github;
            const comments = await octokit.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            const existingComment = comments.data.find(comment => comment.body.includes('## Lighthouse Scores'));

            if (existingComment) {
              await octokit.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment,
              });
            } else {
              await octokit.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }